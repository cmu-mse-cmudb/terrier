pipeline {
    agent none

    environment{
        //Do not change. 
        //Performance Storage Service(Django) authentication information. The credentials can only be changed on Jenkins webpage
        PSS_CREATOR= credentials('pss-creator')
    }
    options {
        buildDiscarder(logRotator(daysToKeepStr: '30'))
        parallelsAlwaysFailFast()
    }

    triggers {
        cron('H H(2-3) * * *')
    }

    stages {
        stage('Binary Metrics') {
            parallel{
                stage('ubuntu-20.04/gcc-9.3 (binary metrics)') {
                    agent {
                        docker {
                            image 'terrier:focal'
                            args '--cap-add sys_ptrace -v /jenkins/ccache:/home/jenkins/.ccache'
                        }
                    }
                    steps {
                        sh 'echo $NODE_NAME'
                        sh script:'echo y | sudo ./script/installation/packages.sh all', label: 'Installing packages'
                        sh script: 'python3 script/testing/binary_metrics/run_binary_metrics.py', lable: 'Binary Metrics'
                    }
                }

                stage('macos-10.14/clang-8.0 (binary metrics)') {
                    agent { label 'macos' }
                    environment {
                        ASAN_OPTIONS="detect_container_overflow=0"
                        LLVM_DIR=sh(script: "brew --prefix llvm@8", label: "Fetching LLVM path", returnStdout: true).trim()
                        CC="${LLVM_DIR}/bin/clang"
                        CXX="${LLVM_DIR}/bin/clang++"
                    }
                    steps {
                        sh 'echo $NODE_NAME'
                        sh script:'echo y | sudo ./script/installation/packages.sh all', label: 'Installing packages'
                        sh script: 'python3 script/testing/binary_metrics/run_binary_metrics.py', lable: 'Binary Metrics'
                    }
                }
            }
        }
        stage('Performance') {
            agent { label 'benchmark' }
            steps {
                sh 'echo $NODE_NAME'
                sh script:'echo y | sudo ./script/installation/packages.sh all', label: 'Installing packages'

                sh script:'''
                mkdir build
                cd build
                cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Release -DTERRIER_USE_ASAN=OFF -DTERRIER_USE_JEMALLOC=ON -DTERRIER_BUILD_TESTS=OFF .. 
                make -j$(nproc) terrier
                ''', label: 'Compiling'

                sh script:'''
                cd build
                timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                ''', label: 'OLTPBench (HDD WAL)'

                sh script:'''
                cd build
                timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly_ramdisk.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                ''', label: 'OLTPBench (RamDisk WAL)'

                sh script:'''
                cd build
                timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly_wal_disabled.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                ''', label: 'OLTPBench (No WAL)'

                archiveArtifacts(artifacts: 'build/oltp_result/**/*.*', excludes: 'build/oltp_result/**/*.csv', fingerprint: true)
            }
            post {
                cleanup {
                    deleteDir()
                }
            }
        }

        stage('Microbenchmark') {
            agent { label 'benchmark' }
            steps {
                sh 'echo $NODE_NAME'
                sh script:'echo y | sudo ./script/installation/packages.sh all', label: 'Installing packages'

                sh script:'''
                mkdir build
                cd build
                cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Release -DTERRIER_USE_ASAN=OFF -DTERRIER_USE_JEMALLOC=ON -DTERRIER_BUILD_TESTS=OFF ..
                make -j$(nproc) all
                ''', label: 'Compiling'

                // The micro_bench configuration has to be consistent because we currently check against previous runs with the same config
                //  # of Threads: 4
                //  WAL Path: Ramdisk
                sh script:'''
                cd script/testing
                python3 micro_bench/run_micro_bench.py --run --num-threads=4 --benchmark-path $(pwd)/../../build/release --logfile-path=/mnt/ramdisk/benchmark.log --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                ''', label:'Microbenchmark'

                archiveArtifacts 'script/testing/*.json'
                junit 'script/testing/*.xml'
            }
            post {
                cleanup {
                    deleteDir()
                }
            }
        }
    }
}
